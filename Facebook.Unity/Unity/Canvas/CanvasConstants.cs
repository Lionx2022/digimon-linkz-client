using System;

namespace Facebook.Unity.Canvas
{
	internal static class CanvasConstants
	{
		private const string JSCode = "\nwindow.FBUnity = {\n    init: function(connectFacebookUrl, locale, debug, initParams, status) {\n        // make element for js sdk\n        if(!document.getElementById('fb-root')) {\n            var fbroot = document.createElement('div');\n            fbroot.id = 'fb-root';\n            var body = document.getElementsByTagName('body')[0];\n            body.insertBefore(fbroot, body.children[0]);\n        }\n\n        // load js sdk\n        var js, id = 'facebook-jssdk', ref = document.getElementsByTagName('script')[0];\n        if (document.getElementById(id)) {return;}\n        js = document.createElement('script'); js.id = id; js.async = true;\n        js.src = connectFacebookUrl + '/' + locale + '/sdk' + (debug ? '/debug' : '') + '.js';\n        ref.parentNode.insertBefore(js, ref);\n        // once jssdk is loaded, init\n        window.fbAsyncInit = function () {\n            initParams = JSON.parse(initParams);\n            initParams.hideFlashCallback = FBUnity.onHideUnity;\n            FB.init(initParams);\n            // send url to unity - needed for deep linking\n            FBUnity.sendMessage('OnUrlResponse', location.href);\n            if (status) {\n                FBUnity.onInitWithStatus();\n            } else {\n                FBUnity.onInit();\n            }\n        };\n    },\n\n    sendMessage: function(method, param) {\n        SendMessage('FacebookJsBridge', method, param);\n    },\n    \n    login: function(scope, callback_id) {\n        FB.login(FBUnity.loginCallback.bind(null, callback_id), scope ? {scope: scope, auth_type: 'rerequest', return_scopes: true} : {return_scopes: true});\n    },\n    \n    loginCallback: function(callback_id, response) {\n        response = {'callback_id': callback_id, 'response': response};\n        FBUnity.sendMessage('OnLoginComplete', JSON.stringify(response));\n    },\n    \n    onInitWithStatus: function() {\n        var timeoutHandler = setTimeout(function() { requestFailed(); }, 3000);\n\n        function requestFailed() {\n            FBUnity.onInit();\n        }\n\n        // try to get the login status right after init'ing\n        FB.getLoginStatus(function(response) {\n            clearTimeout(timeoutHandler);\n            FBUnity.onInit(response);\n        });\n    },\n\n    onInit: function(response) {\n        var jsonResponse = '';\n        if(response && response.authResponse) {\n            jsonResponse = JSON.stringify(response);\n        }\n        \n        FBUnity.sendMessage('OnInitComplete', jsonResponse);\n        FB.Event.subscribe('auth.authResponseChange', function(r){ FBUnity.onAuthResponseChange(r) });\n\n        FBUnity.logLoadingTime(response);\n    },\n\n    logLoadingTime: function(response) {\n        FB.Canvas.setDoneLoading(\n          function (result) {\n            // send implicitly event to log the time from the canvas pages load to facebook init being called.\n            FBUnity.logAppEvent('fb_canvas_time_till_init_complete', result.time_delta_ms / 1000, null);\n          }\n        );\n    },\n\n    onAuthResponseChange: function(response) {\n        FBUnity.sendMessage('OnFacebookAuthResponseChange', response ? JSON.stringify(response) : '');\n    },\n\n    apiCallback: function(query, response) {\n        response = {'query': query, 'response': response};\n        FBUnity.sendMessage('OnFacebookAPIResponse', JSON.stringify(response));\n    },\n\n    api: function(query) {\n        FB.api(query, FBUnity.apiCallback.bind(null , query));\n    },\n\n    activateApp: function() {\n        FB.AppEvents.activateApp();\n    },\n\n    uiCallback: function(uid, callbackMethodName, response) {\n        response = {'callback_id': uid, 'response': response};\n        FBUnity.sendMessage(callbackMethodName, JSON.stringify(response));\n    },\n\n    logout: function() {\n        FB.logout();\n    },\n\n    logAppEvent: function(eventName, valueToSum, parameters) {\n        FB.AppEvents.logEvent(\n            eventName,\n            valueToSum,\n            JSON.parse(parameters)\n        );\n    },\n\n    logPurchase: function(purchaseAmount, currency, parameters) {\n        FB.AppEvents.logPurchase(\n            purchaseAmount,\n            currency,\n            JSON.parse(parameters)\n        );\n    },\n\n    ui: function(x, uid, callbackMethodName) {\n        x = JSON.parse(x);\n        FB.ui(x, FBUnity.uiCallback.bind(null, uid, callbackMethodName));\n    },\n\n    \n    hideUnity: function(direction) {\n        direction = direction || 'hide';\n        //TODO support this for webgl\n        var unityDiv = jQuery(u.getUnity());\n\n        if(direction == 'hide') {\n            FBUnity.sendMessage('OnFacebookFocus', 'hide');\n        } else /*show*/ {\n            FBUnity.sendMessage('OnFacebookFocus', 'show');\n\n            if (FBUnity.showScreenshotBackground.savedBackground) {\n                /*\n                if(fbShowScreenshotBackground.savedBackground == 'sentinel') {\n                    jQuery('body').css('background', null);\n                } else {\n                    jQuery('body').css('background', fbShowScreenshotBackground.savedBackground);\n                }\n                */\n            }\n\n            hideUnity.savedCSS = FBUnity.showScreenshotBackground.savedBackground = null;\n        }\n    },\n    \n    showScreenshotBackground: function(pngbytes) /*and hide unity*/ {\n        // window.screenxX and window.screenY = browser position\n        // window.screen.height and window.screen.width = screen size\n        // findPos, above, locates the iframe within the browser\n        /*\n        if (!fbShowScreenshotBackground.savedBackground)\n            fbShowScreenshotBackground.savedBackground = jQuery('body').css('background') || 'sentinel';\n\n        jQuery('body').css('background-image', 'url(data:image/png;base64,'+pngbytes+')');\n        jQuery('body').css(\n            'background-position',\n            -(screenPosition.iframeX)+'px '+\n            -(screenPosition.iframeY)+'px'\n        );\n        jQuery('body').css('background-size', '100%');\n        jquery('body').css('background-repeat', 'no-repeat');\n        // TODO: Zoom detection\n        */\n    },\n    \n    onHideUnity: function(info) {\n      if(info.state == 'opened') {\n        FBUnity.sendMessage('OnFacebookFocus', 'hide');\n      } else {\n        FBUnity.sendMessage('OnFacebookFocus', 'show');\n      }\n    }\n};    \n\nif(!screenPosition) {\n    var body = document.getElementsByTagName('body')[0];\n    var screenPosition = {omo : body.onmouseover || function(){}, iframeX: 0, iframeY: 0};\n    body.onmouseover = function(e) {\n        // Distance from top of screen to top of client area\n        screenPosition.iframeX = e.screenX - e.clientX;\n        screenPosition.iframeY = e.screenY - e.clientY;\n\n        screenPosition.omo(e);\n    }\n}";

		internal static string JSSDKBindings
		{
			get
			{
				return "\nwindow.FBUnity = {\n    init: function(connectFacebookUrl, locale, debug, initParams, status) {\n        // make element for js sdk\n        if(!document.getElementById('fb-root')) {\n            var fbroot = document.createElement('div');\n            fbroot.id = 'fb-root';\n            var body = document.getElementsByTagName('body')[0];\n            body.insertBefore(fbroot, body.children[0]);\n        }\n\n        // load js sdk\n        var js, id = 'facebook-jssdk', ref = document.getElementsByTagName('script')[0];\n        if (document.getElementById(id)) {return;}\n        js = document.createElement('script'); js.id = id; js.async = true;\n        js.src = connectFacebookUrl + '/' + locale + '/sdk' + (debug ? '/debug' : '') + '.js';\n        ref.parentNode.insertBefore(js, ref);\n        // once jssdk is loaded, init\n        window.fbAsyncInit = function () {\n            initParams = JSON.parse(initParams);\n            initParams.hideFlashCallback = FBUnity.onHideUnity;\n            FB.init(initParams);\n            // send url to unity - needed for deep linking\n            FBUnity.sendMessage('OnUrlResponse', location.href);\n            if (status) {\n                FBUnity.onInitWithStatus();\n            } else {\n                FBUnity.onInit();\n            }\n        };\n    },\n\n    sendMessage: function(method, param) {\n        SendMessage('FacebookJsBridge', method, param);\n    },\n    \n    login: function(scope, callback_id) {\n        FB.login(FBUnity.loginCallback.bind(null, callback_id), scope ? {scope: scope, auth_type: 'rerequest', return_scopes: true} : {return_scopes: true});\n    },\n    \n    loginCallback: function(callback_id, response) {\n        response = {'callback_id': callback_id, 'response': response};\n        FBUnity.sendMessage('OnLoginComplete', JSON.stringify(response));\n    },\n    \n    onInitWithStatus: function() {\n        var timeoutHandler = setTimeout(function() { requestFailed(); }, 3000);\n\n        function requestFailed() {\n            FBUnity.onInit();\n        }\n\n        // try to get the login status right after init'ing\n        FB.getLoginStatus(function(response) {\n            clearTimeout(timeoutHandler);\n            FBUnity.onInit(response);\n        });\n    },\n\n    onInit: function(response) {\n        var jsonResponse = '';\n        if(response && response.authResponse) {\n            jsonResponse = JSON.stringify(response);\n        }\n        \n        FBUnity.sendMessage('OnInitComplete', jsonResponse);\n        FB.Event.subscribe('auth.authResponseChange', function(r){ FBUnity.onAuthResponseChange(r) });\n\n        FBUnity.logLoadingTime(response);\n    },\n\n    logLoadingTime: function(response) {\n        FB.Canvas.setDoneLoading(\n          function (result) {\n            // send implicitly event to log the time from the canvas pages load to facebook init being called.\n            FBUnity.logAppEvent('fb_canvas_time_till_init_complete', result.time_delta_ms / 1000, null);\n          }\n        );\n    },\n\n    onAuthResponseChange: function(response) {\n        FBUnity.sendMessage('OnFacebookAuthResponseChange', response ? JSON.stringify(response) : '');\n    },\n\n    apiCallback: function(query, response) {\n        response = {'query': query, 'response': response};\n        FBUnity.sendMessage('OnFacebookAPIResponse', JSON.stringify(response));\n    },\n\n    api: function(query) {\n        FB.api(query, FBUnity.apiCallback.bind(null , query));\n    },\n\n    activateApp: function() {\n        FB.AppEvents.activateApp();\n    },\n\n    uiCallback: function(uid, callbackMethodName, response) {\n        response = {'callback_id': uid, 'response': response};\n        FBUnity.sendMessage(callbackMethodName, JSON.stringify(response));\n    },\n\n    logout: function() {\n        FB.logout();\n    },\n\n    logAppEvent: function(eventName, valueToSum, parameters) {\n        FB.AppEvents.logEvent(\n            eventName,\n            valueToSum,\n            JSON.parse(parameters)\n        );\n    },\n\n    logPurchase: function(purchaseAmount, currency, parameters) {\n        FB.AppEvents.logPurchase(\n            purchaseAmount,\n            currency,\n            JSON.parse(parameters)\n        );\n    },\n\n    ui: function(x, uid, callbackMethodName) {\n        x = JSON.parse(x);\n        FB.ui(x, FBUnity.uiCallback.bind(null, uid, callbackMethodName));\n    },\n\n    \n    hideUnity: function(direction) {\n        direction = direction || 'hide';\n        //TODO support this for webgl\n        var unityDiv = jQuery(u.getUnity());\n\n        if(direction == 'hide') {\n            FBUnity.sendMessage('OnFacebookFocus', 'hide');\n        } else /*show*/ {\n            FBUnity.sendMessage('OnFacebookFocus', 'show');\n\n            if (FBUnity.showScreenshotBackground.savedBackground) {\n                /*\n                if(fbShowScreenshotBackground.savedBackground == 'sentinel') {\n                    jQuery('body').css('background', null);\n                } else {\n                    jQuery('body').css('background', fbShowScreenshotBackground.savedBackground);\n                }\n                */\n            }\n\n            hideUnity.savedCSS = FBUnity.showScreenshotBackground.savedBackground = null;\n        }\n    },\n    \n    showScreenshotBackground: function(pngbytes) /*and hide unity*/ {\n        // window.screenxX and window.screenY = browser position\n        // window.screen.height and window.screen.width = screen size\n        // findPos, above, locates the iframe within the browser\n        /*\n        if (!fbShowScreenshotBackground.savedBackground)\n            fbShowScreenshotBackground.savedBackground = jQuery('body').css('background') || 'sentinel';\n\n        jQuery('body').css('background-image', 'url(data:image/png;base64,'+pngbytes+')');\n        jQuery('body').css(\n            'background-position',\n            -(screenPosition.iframeX)+'px '+\n            -(screenPosition.iframeY)+'px'\n        );\n        jQuery('body').css('background-size', '100%');\n        jquery('body').css('background-repeat', 'no-repeat');\n        // TODO: Zoom detection\n        */\n    },\n    \n    onHideUnity: function(info) {\n      if(info.state == 'opened') {\n        FBUnity.sendMessage('OnFacebookFocus', 'hide');\n      } else {\n        FBUnity.sendMessage('OnFacebookFocus', 'show');\n      }\n    }\n};    \n\nif(!screenPosition) {\n    var body = document.getElementsByTagName('body')[0];\n    var screenPosition = {omo : body.onmouseover || function(){}, iframeX: 0, iframeY: 0};\n    body.onmouseover = function(e) {\n        // Distance from top of screen to top of client area\n        screenPosition.iframeX = e.screenX - e.clientX;\n        screenPosition.iframeY = e.screenY - e.clientY;\n\n        screenPosition.omo(e);\n    }\n}";
			}
		}
	}
}
